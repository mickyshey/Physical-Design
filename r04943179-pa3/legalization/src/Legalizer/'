#ifndef _CLEGAL_
#define _CLEGAL_

#include "Util.h"
#include "Row.h"
#include "Placement.h"
#include "GnuplotLivePlotter.h"
#include "GnuplotMatrixPlotter.h"
#include <math.h>
#include <stdio.h>

using namespace std;

class Cluster;

class CLegal
{
    public:
        CLegal( Placement& placement );
       ~CLegal(void){}

        Placement& _placement;
        GnuplotLivePlotter gnuplotLivePlotter;

    //Solve the legalization, "true" indicates success
        bool solve();
    //Check the legalization result is overlap-free, within boundary, and on-site, "true" indicates legal
        bool check();
        void saveGlobalResult();
        void setLegalResult();
        double totalDisplacement();

        //**********************************
        //* Information of Macros or Cells *
        //**********************************

        vector<unsigned> m_cell_order; //Used as legalization order
        vector<Row> m_free_sites; //Record the unused sites
        vector<Row> m_left_free_sites;

        vector<CPoint> m_origLocations;	//Record the original locations
        vector<CPoint> m_bestLocations;	//Record the best locations
        vector<Row> m_best_sites;       //Record the resulting sites of the best result

        vector<CPoint> m_bestLocations_left;
        vector<Row> m_best_sites_left;
        vector<CPoint> m_globalLocations;

        vector<int> m_macro_ids;
        vector<double> m_orig_widths;


        //Variables and functions used for 4-directional macro shifter
        vector<CPoint> m_macro_shifter_orig_positions;	//Record the original macro positions (left-bottom)
                                                        //before macro shifter
        vector<CPoint> m_macro_shifter_best_positions;	//Record the best macro positions (left-bottom)
                                                        //in 4-directional macro shifter

        vector<int> m_process_list;    //CalculateCellOrder() and CalculateNewLocation()
                                       //only act on modules in the m_process_list
        //********************************
        //*           parameter          *
        //********************************
        double m_max_module_height;
        double m_max_module_width;
        double m_average_cell_width;    //Average standard cell width
        double m_site_bottom, m_site_height; //Keep the bottom y coordinate of the sites and the
                                                                   //height of each site
        int m_unlegal_count;            //Number of unlegalized cells
        double m_chip_left_bound;	//Record the chip left boundary
		double m_chip_right_bound;	//Record the chip right boundary

        //*******************************
        //*		defined by r04943179	*
        //*******************************
		double moduleWidth(unsigned moduleIdx) { return _placement.module(moduleIdx).width(); }
		void InitCellOrder();
		unsigned placeRow(unsigned moduleIdx, vector<Cluster*>& clusters, bool isReal);
		void undoPlaceRow(unsigned mergeCount, vector<Cluster*>& clusters);
		double getCost(vector<Cluster*>& clusters, unsigned mergeCount);
		bool overUpperBound(unsigned moduleIdx, unsigned rowIdx, double bestCost);
	
		vector< vector<Cluster*> > _clusters_in_row;

		void test();
};

class Cluster
{
	public:
		Cluster(unsigned moduleIdx, CLegal& legal):
			_legal(legal),
			_origX(0),
			_origE(0),
			_origQ(0),
			_origW(0),
			_nextC(NULL),
			_preC(NULL),
			_hea	
		 {
			cells_in_cluster.push_back(moduleIdx);
			x_c = _legal.m_globalLocations[moduleIdx].x;
			q_c = e_c() * (_legal.m_globalLocations[moduleIdx].x - w_c);
			w_c = w_c + _legal.moduleWidth(moduleIdx);
			reset();
		}	
		~Cluster() { cells_in_cluster.clear(); undoCells.clear(); }

		void reset() { undoCells.clear(); origX = origQ = origW = 0; }

		double e_c() { return cells_in_cluster.size(); }

		void addCell(unsigned moduleIdx, bool isReal);
		void addCluster(Cluster& c);
		void collapse(unsigned clusterIdx, vector<Cluster*>& clusters, bool isReal, unsigned& mergeCount);
		void merge(Cluster* predecessor, vector<Cluster*>& clusters, bool isReal);
		void dup2Orig() { origX = x_c; origQ = q_c; origW = w_c; }
		void set2Orig() { x_c = origX; q_c = origQ; w_c = origW; }

		void set2OrigLocations(unsigned rowIdx);
		void set2BestLocations(unsigned rowIdx);

		double getX() { return _X; }
		double getE() { return _E; }
		double getQ() { return _Q; }
		double getW() { return _W; }
		Cluster*	getNextC()	{ return _nextC; }
		Cluster*	getPreC()	{ return _preC; }
		MNode*		getHeadM()	{ return _headM; }
		MNode*		getLastM()	{ return _lastM; }


	private:	
		// assume all modules are weighted 1
		double _X;
		double _E;
		double _Q;
		double _W;
		Cluster*	_nextC;
		Cluster*	_preC;
		MNode*		_headM;
		MNode*		_lastM;	

		double _origX;
		double _origE;
		double _origQ;
		double _origW;

		CLegal& _legal;
};

class MNode
{
	publice:
		MNode(Module* m): _m(m), _next(NULL) {}
		~MNode() {}	

		unsigned getModule() { return _m; }
		MNode* 	getNextM() { return _nextM; }
	private:
		unsigned _mId;
		MNode* _nextM;
};

#endif 

